<?php

namespace ElectroAtoui\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;


/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends EntityRepository
{

    public function byCategorie($category_id)
    {
        $qb = $this->createQueryBuilder('p')
                    ->select('p')
                    ->where('u.categaory_id = :categaory_id')
                    ->andWhere('p.disponible = 1')
                    ->orderBy('p.id')
                    ->setParameter('categaory_id', $category_id);
        return $qb->getQuery()->getResult();
    }


    public function getLastProducts($limit)
    {
        $qb = $this->createQueryBuilder('p')
                    ->select('p')
                    ->OrderBy('p.id', 'DESC')
                    ->setMaxResults($limit);;
        return $qb->getQuery()->getResult();
    }


    public function findByQuery($q)
    {
        $qb = $this->createQueryBuilder('p')
                    ->select('p')
                    ->where('p.name like :query')
                    ->andWhere('p.is_active = 1')
                    ->orderBy('p.id')
                    ->setParameter('query', '%'.$q.'%')
                    ->setMaxResults(10);
        return $qb->getQuery()->getResult();
    }


    public function retrieveByPks($products, $query)
    {
        $ids = array();
        foreach($products as $product) {
            $ids[] = $product->getId();
        }

        $qb = $this->createQueryBuilder('p')
                    ->select('p')
                    ->where('p.is_active = 1')
                    ->andWhere('p.id in (:ids)')
                    ->andWhere('p.quantity > 0')
                    ->addOrderBy(
                        'p.'.$query->get('sort', 'id'),
                        $query->get('direction', 'asc')
                    )->setParameter('ids', $ids);
        return $qb->getQuery()->getResult();
    }


    public function getRand($limit)
    {
        $qb = $this->createQueryBuilder('p')
                    ->addSelect('RAND() as HIDDEN rand')
                    ->andWhere('p.is_active = 1')
                    ->addOrderBy('rand')
                    ->setMaxResults($limit);
        return $qb->getQuery()->getResult();
    }


    public function findRelated($product)
    {
        $qb = $this->createQueryBuilder('p')
                    ->select('p')
                    ->where('p.name like :query')
                    ->andWhere('p.is_active = 1')
                    // ->andWhere('p.id != :p_id')
                    ->orderBy('p.id')
                    ->setParameter('query', '%'.$product->getName().'%');
                    // ->setParameter('p_id', $product->getId());
        return $qb->getQuery()->getResult();
    }
}
